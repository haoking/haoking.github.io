---
layout:     post
title:      "Department Coding Guidelines"
subtitle:   "iOS and C++ Coding Guidelines"
date:       2018-12-13 10:00:00
author:     "Haoking"
header-img: "post_Images/2018_12_13/home-banner4.jpg"
tags:
    - iOS
    - C++
    - Coding Guidelines
    - Swift 
    - Objective-C
---

> [Please indicate the source of forwarding and be a follower of my Github](https://github.com/haoking).



## **Coding Guidelines**

**Department Coding Guidelines**

This is the coding guidelines for our department.



```swift



GIARAN编程规约 
目录


(一)	命 名 风 格      ...................................................................1
(二)	常 量 定 义      ...................................................................3
(三)	代 码 格 式      ...................................................................4
(四)	OOP 规约		  ...................................................................6
(五)	集 合 处 理      ...................................................................9
(六)	并 发 处 理      ..................................................................12
(七)	控 制 语 句      ..................................................................14
(八)	注 释 规 约      ..................................................................16
(九)	其 它           ..................................................................17




 
开发手册


版本号	
制定团队	
更新日期	
备注
1.0.0	
GIARAN技术团队	2018.0125	待修订

(一) 命名风格
1.	【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。反 例 ：_name / name / $Object / name_ / name$ / Object$
2.	【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式。
正 例 ：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion
反 例 ：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion
3.	【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。
正 例 ： localValue / getHttpMessage() / inputUserId
4.	【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。正例：MAX_STOCK_COUNT
反例：MAX_COUNT
5.	【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。
6.	【强制】布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC
 
框架在反向解析的时候，"以为"对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。
7.	【强制】库类公共API, 变量命名规则, "Giaran"+"模块名称"+"变量名"。
正例：GiaranLandmarkPoint。
反例：Point。
8.	【强制】库类公共API, 方法命名规则，标准库只显式的展示公共方法，私有的方法和变量放在内部类中。最好提供不同版本的API调用文件（C++, Android, Java, JavaScript）, 视情况而定。
9.	【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。
正例：从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。反例：变量 int a; 的随意命名方式。
10.	【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。
正 例 ：public class OrderFactory; public class LoginProxy; public class ResourceObserver;

11.	【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。
正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKOWN_REASON。

 

(二) 常量定义
1.	【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中。反例：String key = "Id#Giaran_" + tradeId;
cache.put(key, value);
2.	【推荐】不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。
说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。
1）	子工程内部共享常量：即在当前子工程的 constant 目录下。
2）	包内共享常量：即在当前包下单独的 constant 目录下。
3）	类内共享常量：直接在类内部 private static final 定义。
3.	【推荐】如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。
正例：public Enum { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}


(三) 代码格式
1.	【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：
1）	左大括号前不换行。
2）	左大括号后换行。
3）	右大括号前换行。
4）	右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。
2.	【强制】 左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。
反例：if (空格 a == b 空格)
3.	【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。
4.	【强制】任何二目、三目运算符的左右两边都需要加一个空格。
说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。
5.	【强制】采用 4 个空格缩进，禁止使用 tab 字符。
说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。不同编译器对tab的识别不同。
正例： （涉及 1-5 点）
public static void main(String[] args) {
// 缩进 4 个空格
String say = "hello";
// 运算符的左右必须有一个空格
int flag = 0;
// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格
if (flag == 0) { System.out.println(say);
}

// 左大括号前加空格且不换行；左大括号后换行
if (flag == 1) { System.out.println("world");
// 右大括号前换行，右大括号后有 else，不用换行
} else {
System.out.println("ok");
// 在右大括号后直接结束，则必须换行
}
}

 

6.	【强制】注释的双斜线与注释内容之间有且仅有一个空格。正例：// 注释内容，注意在//和注释内容之间有一个空格。
7.	【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：
1）	第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。
2）	运算符与下文一起换行。
3）	方法调用的点符号与下文一起换行。
4）	方法调用时，多个参数，需要换行时，在逗号后进行。
5）	在括号前不要换行，见反例。正例：
StringBuffer sb = new StringBuffer();
// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行
sb.append("zi").append("xin")...
.append("huang")...
.append("huang")...
.append("huang");
反例：
StringBuffer sb = new StringBuffer();
// 超过 120 个字符的情况下，不要在括号前换行
sb.append("zi").append("xin")...append ("huang");

// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行
method(args1, args2, args3, ...
, argsX);
8.	【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。正例：下例中实参的"a",后边必须要有一个空格。
method("a", "b", "c"); 
9.	【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。正例：
int a = 3; long b = 4L; float c = 5F;
StringBuffer sb = new StringBuffer();
说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。
10.	【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。
说明：没有必要插入多个空行进行隔开。

(四) OOP 规约
1.	【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。尽量使用类方法，不需要创建实例，不需要释放实例内存。
2.	【强制】所有的覆写方法，必须加@Override 注解。
说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。
3.	【强制】尽量不用可变参数编程, 使用分离的多参数编程，减少出错机会，编译较快。
正例：public User getUsers(String obj1) {...}
		     public User getUsers(String obj1, String obj2) {...}
       public User getUsers(String obj1, String obj2, String obj3) {...}
4.	【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。
5.	【强制】不能使用过时的类或方法。
6.	【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。
尽量使用构造方法进行计算，而尽量少使用逻辑运算符，
说明：对于运算符在进行每次运算时会new新对象，占用寄存器并不会复用，多次循环中可能造成内存溢出的情况。
 
7.	【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。
8.	【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起， 便于阅读。
9.	【推荐】 类内方法定义顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter
方法。
 
说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是"模板设计模式"下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 getter/setter 方法放在类体最后。
10.	【推荐】在 getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。
反例：
public Integer getData() { if (true) {
return this.data + 100;
} else {
return this.data - 100;
}
}

11.	【推荐】循环体内，字符串的连接方式，使用 append 方法进行扩展。
说明：反编译出的字节码文件显示每次循环都会 new 出一个对象，然后进行
+ 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。
反例：
String str = "start";
for (int i = 0; i < 100; i++) { str = str + "hello";
}
12.	【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：
1）	不允许被继承的类，如：String 类。
2）	不允许修改引用的域对象，如：POJO 类的域变量。
3）	不允许被重写的方法，如：POJO 类的 setter 方法。
4）	不允许运行过程中重新赋值的局部变量。
5）	避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。
13.	【推荐】类成员与方法访问控制从严，库的设计中，访问控制是最重要的部分。
1）	如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。
2）	工具类不允许有 public 或 default 构造方法。
3）	类非 static 成员变量并且与子类共享，必须是 protected。
4）	类非 static 成员变量并且仅在本类使用，必须是 private。
5）	类 static 成员变量如果仅在本类使用，必须是 private。
 
6）	若是 static 成员变量，必须考虑是否为 final。
7）	类成员方法只供类内部调用，必须是 private。
8）	类成员方法只对继承类公开，那么限制为 protected。
说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。



(五) 集合处理
1.	【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素如果并发操作，需要对象加锁。
2.	【推荐】集合或者素组初始化时，需要显式地指定集合初始值大小，暂时无法确定大小，请设置为默认值 16.
说明：由于集合和数组地城都是用hashMap的存储方式，当resize时，需要重建hash表的结构，严重影响性能 。
 
3.	【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的
contains 方法进行遍历、对比、去重操作。


(六) 并发处理
1.	【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。
2.	【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。正例：
public class TimerTaskThread extends Thread { public TimerTaskThread() {
super.setName("TimerTaskThread");
...
}
 
3.	【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。
说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。
4.	【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。
说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。
5.	【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。
说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。 


(七) 控制语句
1.	【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。
2.	【强制】在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：if (condition) statements;
3.	【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：
if (condition) {
...
return obj;
}
// 接着写 else 的业务逻辑代码;
说明：如果非得使用 if()...else if()...else...方式表达逻辑，【强制】避免后续代码维护困难，请勿超过 3 层。
正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，
其中卫语句示例如下：

public void today() { if (isBusy()) {
print("change time."); return;
}
if (isFree()) {
print("go to travel."); return;
}
 
print("stay at home to learn Alibaba Java Coding Guidelines."); return;
}

4.	【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。
说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？此外，if的判断条件里的对象在if结束前是不释放的。
正例：
// 伪代码如下
final boolean existed = (file.open(fileName, "w") != null) && (...) || (...); if (existed) {
...
}
反例：
if ((file.open(fileName, "w") != null) && (...) || (...)) {
...
}
5.	【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。
6.	【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。
下列情形，需要进行参数校验：
1）	调用频次低的方法。
2）	执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。
3）	需要极高稳定性和可用性的方法。
4）	对外提供的开放接口，不管是 RPC/API/HTTP 接口。
5）	敏感权限入口。
下列情形，不需要进行参数校验：
1）	极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。
2）	底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。
3）	被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参
数已经做过检查或者肯定不会有问题，此时可以不校验参数。
 

(八) 注释规约
1.	【强制】类、类属性、类方法的注释必须使用/**内容*/格式，不得使用// xxx 方式。
2.	【强制】所有的类都必须添加创建者和创建日期。
3.	【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。
4.	【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。
5.	【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。
说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后， 就失去了导航的意义。
6.	【参考】谨慎注释掉代码。在上方详细说明，而不是简单的注释掉。如果无用，则删除。
说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。
7.	【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。
反例：
// put elephant into fridge put(elephant, fridge);
 
方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。
8.	【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描， 经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。                                
   1） 待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）
表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc
还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。
2） 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）
在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。


(九) 其它
1.	【推荐】不要在视图模板中加入任何复杂的逻辑。
说明：根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。
2.	【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。
3.	【推荐】及时清理不再使用的代码段或配置信息。
说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。
正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。 


```



Then that's it.



Thanks!



If you like my blog, please :

[Please indicate the source of forwarding and be a follower of my Github](https://github.com/haoking).



By the way, if you have any questions or there is something wrong here, please contact me on Email:

haokinus@gmail.com 


